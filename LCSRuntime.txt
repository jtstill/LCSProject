Runtime of the algorithm

File1 has n lines
File2 has m lines


Building the table:

for loop for file 1: n
for loop for file 2: m
inside for loops: 
	- if i or j is 0: 1
	- if i or j != 0: 
		- assign left: 1
		- assign top: 1
		- if left > top: 1
		- if lines equal: 1 for comparison, 1 for diagonal assignment,
					1 for comparison to biggest = 3
		- assign table element: 1
total build time (worst case scenario): n( m( 1+1+1+3+1 )) = n*6m = 6nm


LCS Retrieval:

assign of i: 1
assign j: 1
initialize LCS: 1

while table[i][j] > 0: at most, <= n+m
	- Why? if moving left or across with each check, worst case would 
	  need to go m checks left plus n checks up to definitively reach
	  0 common lines: assuming there is at least one common line, a
	  a diagonal move means one less check
within each checked cell: 
	- assign left: 1
	- assign top: 1
	- assign diagonal: 1
	ONE OF THESE:
	- if top == left: 1
		- check lines for match: 1
			- if match: add to LCS (1), decrease i and j (2) = total 3
			- else move left: 1
	- else if top > left: move up (1)
	- else move left: 1
	(most taxing case: top == left, lines match, move diagonally --> 5)
return out (1)

total retrieval time (worst case): (n+m)*(1+1+1 + 5) + 1 
					   = (n+m)*(8) + 1 
					   = 8m + 8n + 1


TOTAL ALGORITHM TIME:
 = build time + retrieval time
 = 6nm + 8m + 8n + 1
	If n >= m, we can replace m with n for an upper bound
	If n < m, we can replace m with n for a lower bound
	Either way, we get the same result:
 = 6n^2 + 8n + 8n + 1
 = 6n^2 + 16n + 1
 = O(n^2)





